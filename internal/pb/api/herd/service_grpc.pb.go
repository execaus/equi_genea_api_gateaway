// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.33.0
// source: api/herd/service.proto

package herd

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	HerdService_CreateHerd_FullMethodName  = "/herd.HerdService/CreateHerd"
	HerdService_GetHerdList_FullMethodName = "/herd.HerdService/GetHerdList"
)

// HerdServiceClient is the client API for HerdService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HerdServiceClient interface {
	CreateHerd(ctx context.Context, in *CreateHerdRequest, opts ...grpc.CallOption) (*CreateHerdResponse, error)
	GetHerdList(ctx context.Context, in *GetHerdListRequest, opts ...grpc.CallOption) (*GetHerdListResponse, error)
}

type herdServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHerdServiceClient(cc grpc.ClientConnInterface) HerdServiceClient {
	return &herdServiceClient{cc}
}

func (c *herdServiceClient) CreateHerd(ctx context.Context, in *CreateHerdRequest, opts ...grpc.CallOption) (*CreateHerdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateHerdResponse)
	err := c.cc.Invoke(ctx, HerdService_CreateHerd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *herdServiceClient) GetHerdList(ctx context.Context, in *GetHerdListRequest, opts ...grpc.CallOption) (*GetHerdListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetHerdListResponse)
	err := c.cc.Invoke(ctx, HerdService_GetHerdList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HerdServiceServer is the server API for HerdService service.
// All implementations must embed UnimplementedHerdServiceServer
// for forward compatibility.
type HerdServiceServer interface {
	CreateHerd(context.Context, *CreateHerdRequest) (*CreateHerdResponse, error)
	GetHerdList(context.Context, *GetHerdListRequest) (*GetHerdListResponse, error)
	mustEmbedUnimplementedHerdServiceServer()
}

// UnimplementedHerdServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHerdServiceServer struct{}

func (UnimplementedHerdServiceServer) CreateHerd(context.Context, *CreateHerdRequest) (*CreateHerdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHerd not implemented")
}
func (UnimplementedHerdServiceServer) GetHerdList(context.Context, *GetHerdListRequest) (*GetHerdListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHerdList not implemented")
}
func (UnimplementedHerdServiceServer) mustEmbedUnimplementedHerdServiceServer() {}
func (UnimplementedHerdServiceServer) testEmbeddedByValue()                     {}

// UnsafeHerdServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HerdServiceServer will
// result in compilation errors.
type UnsafeHerdServiceServer interface {
	mustEmbedUnimplementedHerdServiceServer()
}

func RegisterHerdServiceServer(s grpc.ServiceRegistrar, srv HerdServiceServer) {
	// If the following call pancis, it indicates UnimplementedHerdServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HerdService_ServiceDesc, srv)
}

func _HerdService_CreateHerd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHerdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HerdServiceServer).CreateHerd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HerdService_CreateHerd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HerdServiceServer).CreateHerd(ctx, req.(*CreateHerdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HerdService_GetHerdList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHerdListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HerdServiceServer).GetHerdList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HerdService_GetHerdList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HerdServiceServer).GetHerdList(ctx, req.(*GetHerdListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HerdService_ServiceDesc is the grpc.ServiceDesc for HerdService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HerdService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "herd.HerdService",
	HandlerType: (*HerdServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateHerd",
			Handler:    _HerdService_CreateHerd_Handler,
		},
		{
			MethodName: "GetHerdList",
			Handler:    _HerdService_GetHerdList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/herd/service.proto",
}
